#!/usr/bin/perl -w

=head1 NAME

useq_cnv_normalise

=head1 SYNOPSIS

useq_cnv_normalise.pl -m path_to_matrix_generated_by_MultipleReplicaScanSeqsCnv_containing_windowed_read_counts -c path_to_file_containing_cnv_values_to_use_for_normalisation -o path_to_output_file

=head1 DESCRIPTION

Script to take the windowed read counts for each sample in the matrix generated by MultipleReplicaScanSeqsCnv and normalise the counts according to copy number loss or gain. Counts are output ready to be utilised by DEseq. Script is executed from within MultipleReplicaScanSeqsCnv.

=head1 FEEDBACK

Gareth Wilson - gareth.wilson@ucl.ac.uk

=head1 AUTHOR - Gareth Wilson

Email E<lt>gareth.wilson@ucl.ac.ukE<gt>
    
=cut

use strict;
use Getopt::Long;
use Bio::Range;

my $script = substr($0,1+rindex($0,'/'));

my $usage = "$script -m path_to_matrix_generated_by_MultipleReplicaScanSeqsCnv_containing_windowed_read_counts -c path_to_file_containing_cnv_values_to_use_for_normalisation -o path_to_output_file -p comma_delimited_list_of_point_folders\n";

my ($path2mat,$path2cnv,$path2output,$window_size,$help,$point_dir);

die $usage unless
	&GetOptions(	'm:s'=>\$path2mat,
			'c:s' => \$path2cnv,
			'o:s' => \$path2output,
			'p:s' => \$point_dir
		)
	&& !$help && $path2mat && $path2cnv && $path2output && $point_dir;
	
die "File $path2mat doesn't exist\n" if not -f $path2mat;
die "Directory $path2cnv doesn't exist\n" if not -d $path2cnv;
die "Directory $path2output doesn't exist\n" if not -d $path2output;


open (OUT, ">$path2output/cnv_matrix.txt") or die "Can't open $path2output/cnv_matrix.txt for writing";
open (LOG, ">$path2output/cnv.log") or die "Can't open $path2output/cnv.log for writing";

my @chroms = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,"X","Y");
my @points = split/,/,$point_dir;


my @windows;
open (MAT, $path2mat ) or die "Can't open $path2mat for reading";
while (my $line = <MAT>)
{
	push @windows, $line;
}
close MAT;
	
foreach my $chrom (@chroms)
{
	#print STDOUT "$chrom\n";
	my (%explorer, %cnv_factor, %range);
	my $samp_count = 0;
	foreach my $sample (@points)
	{
		my $count = 0;
		$samp_count++;
		my @ranges;
		$sample =~s/_Point//;
		print LOG "$sample\n";
		if (open (CNV, "$path2cnv/$sample" ))
		{ 
		while (my $line = <CNV>)
		{
			if ($count > 0)
			{
				chomp $line;
				my @elems = split /\t/,$line;
				my $begin = $elems[1];
				my $end = $elems[2];
				my $chr = $elems[0];
				$chr =~s/chr//;
				if ($chr eq $chrom)
				{
					#print $line;
					my $factor = 2/$elems[3];
					my $range = Bio::Range->new(-start=>$begin, -end=>$end);
					push @ranges, $range;
					$cnv_factor{$samp_count}{$begin} = $factor;
				}
			}
			$count++;
			$range{$samp_count} = [@ranges];
		}
		close CNV;
		}
		else
		{
			print LOG "Can't open $path2cnv/$sample for reading\n";
			
		}
	}
	
	my @chr_windows = grep(m/chr$chrom:/, @windows);
	#/
	foreach my $line (@chr_windows)
	{
		chomp $line;
		my @elems = split /\t/,$line;
		my $coord = $elems[0];
		my @coords = split /:/,$coord;
		my $begin = $coords[1];
		my $end = $coords[2];
		my $wrange = Bio::Range->new(-start=>$begin, -end=>$end);
		my $real_win = $end - $begin + 1;
		my $fact_count = $real_win;
		my $out_string = "$coord";
		#foreach my $sample (sort {$a<=>$b} keys %range)
		for (my $sample = 1;$sample<=$samp_count;$sample++)
		{
			my $total_intersect = 0;
			my $total_factor = 0;
			if (exists $range{$sample})
			{
				my @ranges = @{$range{$sample}};
				foreach my $entry (@ranges)
				{
					if (my ($Istart, $Istop, $Istrand) = $wrange->intersection($entry))
					{
						my $intersect = $Istop - $Istart + 1;
						my $factor = $cnv_factor{$sample}{$entry->start()};
						$total_intersect += $intersect;
						$total_factor += $intersect * $factor;
					}
				}
				my $remain = $fact_count - $total_intersect;
				$total_factor += $remain;
				my $final_factor = $total_factor/$real_win;
				my $reads = $elems[$sample]*$final_factor;
				my $rounded = sprintf("%.0f", $reads);
				$out_string .= "\t$rounded";
			}
			else
			{
				$out_string .= "\t$elems[$sample]";
			}
		}
		print OUT "$out_string\n"; 

	}
}
close OUT;
close LOG;
exit 0;
